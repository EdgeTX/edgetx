---
name: Validate fw.json
on:
  push:
    paths:
      - 'fw.json'
  pull_request:
    paths:
      - 'fw.json'
  workflow_dispatch:

jobs:
  json-validate:
    name: Validate fw.json file
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Validate fw.json syntax and structure
        run: |
          python3 -c "
          import json
          import sys
          
          print('üîç Validating fw.json...')
          
          # Load and parse fw.json
          try:
              with open('fw.json', 'r') as f:
                  data = json.load(f)
              print('‚úÖ JSON syntax is valid')
          except json.JSONDecodeError as e:
              print(f'‚ùå JSON syntax error: {e}')
              sys.exit(1)
          except FileNotFoundError:
              print('‚ùå fw.json file not found')
              sys.exit(1)
          
          # Validate required fields
          if 'targets' not in data:
              print('‚ùå Missing required field: targets')
              sys.exit(1)
          if 'changelog' not in data:
              print('‚ùå Missing required field: changelog')
              sys.exit(1)
          
          # Validate field types
          if not isinstance(data['targets'], list):
              print('‚ùå Field \"targets\" must be an array')
              sys.exit(1)
          if not isinstance(data['changelog'], str):
              print('‚ùå Field \"changelog\" must be a string')
              sys.exit(1)
          
          # Validate each target structure
          for i, target in enumerate(data['targets']):
              if not isinstance(target, list):
                  print(f'‚ùå Target {i+1} must be an array')
                  sys.exit(1)
              if len(target) != 2:
                  print(f'‚ùå Target {i+1} must have exactly 2 elements, found {len(target)}')
                  sys.exit(1)
              if not isinstance(target[0], str):
                  print(f'‚ùå Target {i+1} first element must be a string')
                  sys.exit(1)
              if not isinstance(target[1], str):
                  print(f'‚ùå Target {i+1} second element must be a string')
                  sys.exit(1)
          
          print(f'‚úÖ Schema validation passed - found {len(data[\"targets\"])} targets')
          
          # Check for extra fields
          allowed_fields = {'targets', 'changelog'}
          extra_fields = set(data.keys()) - allowed_fields
          if extra_fields:
              print(f'‚ùå Unexpected fields found: {list(extra_fields)}')
              sys.exit(1)
          
          print('‚úÖ No unexpected fields found')
          "

      - name: Validate targets alphabetical order (case-insensitive)
        run: |
          python3 -c "
          import json
          import sys
          
          # Load fw.json
          with open('fw.json', 'r') as f:
              data = json.load(f)
          
          # Extract target names (first element of each target pair)
          target_names = [target[0] for target in data['targets']]
          
          # Sort case-insensitively using key=str.lower
          sorted_names = sorted(target_names, key=str.lower)
          
          # Check if they're in case-insensitive alphabetical order
          if target_names != sorted_names:
              print('‚ùå ERROR: Targets are not in alphabetical order (case-insensitive)!')
              print()
              print('Current order:')
              for i, name in enumerate(target_names):
                  print(f'  {i+1:2d}. {name}')
              print()
              print('Expected alphabetical order (case-insensitive):')
              for i, name in enumerate(sorted_names):
                  print(f'  {i+1:2d}. {name}')
              print()
              
              # Show which targets are out of place
              misplaced = []
              for i, (current, expected) in enumerate(zip(target_names, sorted_names)):
                  if current != expected:
                      misplaced.append(f'Position {i+1}: found \\\"{current}\\\", expected \\\"{expected}\\\"')
              
              if misplaced:
                  print('Misplaced targets:')
                  for item in misplaced:
                      print(f'  - {item}')
              
              sys.exit(1)
          else:
              print('‚úÖ All targets are in alphabetical order (case-insensitive)!')
              print(f'Found {len(target_names)} targets, all properly sorted.')
          "
